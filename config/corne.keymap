/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

&lt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COMMA";
            bindings =
                <&kp COMMA>,
                <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        vim_i: vim_i {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_I";
            bindings =
                <&to 0>,
                <&vim_I>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        vim_o: vim_o {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_O";
            bindings =
                <&next_line_enter>,
                <&previous_line_enter>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        vim_c_r: vim_c_r {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_C_R";
            bindings =
                <&none>,
                <&kp LG(LS(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        vim_backspace: vim_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_BACKSPACE";
            bindings =
                <&kp LA(BACKSPACE)>,
                <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        slashandbackslash: slashandbackslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHANDBACKSLASH";
            bindings =
                <&kp SLASH>,
                <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        quote: quote {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE";
            bindings =
                <&kp SINGLE_QUOTE>,
                <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        coma_semi: coma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMA_SEMI";
            bindings =
                <&kp COMMA>,
                <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings =
                <&kp PERIOD>,
                <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        q_grave: q_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_GRAVE";
            bindings =
                <&kp Q>,
                <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        home: home {
            compatible = "zmk,behavior-mod-morph";
            label = "HOME";
            bindings =
                <&kp LG(LEFT)>,
                <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        end: end {
            compatible = "zmk,behavior-mod-morph";
            label = "END";
            bindings =
                <&kp LG(RIGHT)>,
                <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RALT)>;
        };
        quote_grave: quote_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_GRAVE";
            bindings =
                <&hm RCTRL SINGLE_QUOTE>,
                <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    macros {
        aacute: aacute {
            compatible = "zmk,behavior-macro";
            label = "AACUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp A>;
        };
        eacute: eacute {
            compatible = "zmk,behavior-macro";
            label = "EACUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp E>;
        };
        iacute: iacute {
            compatible = "zmk,behavior-macro";
            label = "IACUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp I>;
        };
        oacute: oacute {
            compatible = "zmk,behavior-macro";
            label = "OACUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp O>;
        };
        uacute: uacute {
            compatible = "zmk,behavior-macro";
            label = "UACUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp U>;
        };
        acirc: acirc {
            compatible = "zmk,behavior-macro";
            label = "ACIRC";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp A>;
        };
        ecirc: ecirc {
            compatible = "zmk,behavior-macro";
            label = "ECIRC";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp E>;
        };
        icirc: icirc {
            compatible = "zmk,behavior-macro";
            label = "ICIRC";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp I>;
        };
        ocirc: ocirc {
            compatible = "zmk,behavior-macro";
            label = "OCIRC";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp O>;
        };
        ucirc: ucirc {
            compatible = "zmk,behavior-macro";
            label = "UCIRC";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp U>;
        };
        atilde: atilde {
            compatible = "zmk,behavior-macro";
            label = "ATILDE";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp A>;
        };
        otilde: otilde {
            compatible = "zmk,behavior-macro";
            label = "OTILDE";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp O>;
        };
        ao: ao {
            compatible = "zmk,behavior-macro";
            label = "AO";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp A &kp O>;
        };
        oes: oes {
            compatible = "zmk,behavior-macro";
            label = "OES";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp O &kp E &kp S>;
        };
        vim_word: vim_word {
            compatible = "zmk,behavior-macro";
            label = "VIM_WORD";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(RIGHT) &kp LA(LEFT)>;
        };
        previous_line_enter: previous_line_enter {
            compatible = "zmk,behavior-macro";
            label = "PREVIOUS_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LS(ENTER) &kp LEFT>;
        };
        vim_I: vim_I {
            compatible = "zmk,behavior-macro";
            label = "VIM_I";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW) &to 0>;
        };
        aes: aes {
            compatible = "zmk,behavior-macro";
            label = "AES";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp A &kp E &kp S>;
        };
        esc_0: esc_0 {
            compatible = "zmk,behavior-macro";
            label = "ESC_0";
            #binding-cells = <0>;
            bindings = <&to 0 &kp ESCAPE>;
        };
        next_line_enter: next_line_enter {
            compatible = "zmk,behavior-macro";
            label = "NEXT_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT) &kp ENTER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        RESET {
            bindings = <&esc_0>;
            key-positions = <12 17>;
        };

        toggle_shift {
            bindings = <&caps_word>;
            key-positions = <16 13>;
        };

        RESET_w {
            bindings = <&esc_0>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
     &q_grave           &kp W             &lt 2 E           &lt 1 R      &lt 6 T            &lt 9 Y            &lt 2 U              &lt 1 I            &kp O               &kp P
  &hm LCTRL A  &hm LEFT_ALT S      &hm LEFT_GUI D  &hm LEFT_SHIFT F      &lt 4 G            &lt 4 H  &hm RIGHT_SHIFT J       &hm LEFT_GUI K  &hm RIGHT_ALT L        &quote_grave
        &kp Z           &kp X               &kp C             &kp V      &lt 7 B            &lt 3 N              &kp M           &coma_semi       &dot_colon  &slashandbackslash
                               &lt 8 LEFT_BRACKET  &hm LEFT_GUI TAB  &lt 5 SPACE    &lt 5 BACKSPACE        &lt 4 ENTER  &lt 6 RIGHT_BRACKET
            >;
        };

        acute {
            bindings = <
   &trans  &trans  &eacute  &trans  &trans    &trans  &uacute  &iacute  &oacute  &trans
  &aacute  &trans   &trans  &trans  &trans    &trans   &trans   &trans   &trans  &trans
   &trans  &trans   &trans  &trans  &trans    &trans   &trans   &trans   &trans  &trans
                    &trans  &trans  &trans    &trans   &trans   &trans
            >;

            label = "acute";
        };

        circ {
            bindings = <
  &trans  &trans  &ecirc  &trans  &trans    &trans  &ucirc  &icirc  &ocirc  &trans
  &acirc  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "circ";
        };

        tilde {
            bindings = <
   &trans  &trans     &trans  &trans  &trans    &trans     &trans  &trans    &oes  &trans
  &atilde     &ao       &aes  &trans  &trans    &trans     &trans  &trans  &trans  &trans
   &trans  &trans  &kp LA(C)  &trans  &trans    &trans  &kp TILDE  &trans  &trans  &trans
                      &trans  &trans  &trans    &trans     &trans  &trans
            >;
        };

        numpad_sym {
            bindings = <
  &kp EXCLAMATION      &kp CARET          &kp DOLLAR              &kp LEFT_BRACE          &kp RIGHT_BRACE    &kp ASTERISK              &kp NUMBER_7            &kp NUMBER_8            &kp NUMBER_9         &kp PLUS
     &hm LCTRL AT  &hm LALT PIPE  &hm LGUI AMPERSAND  &hm LSHFT LEFT_PARENTHESIS  &lt 4 RIGHT_PARENTHESIS       &kp SLASH  &hm RIGHT_SHIFT NUMBER_4  &hm RIGHT_GUI NUMBER_5  &hm RIGHT_ALT NUMBER_6  &hm RCTRL MINUS
      &kp PERCENT       &kp HASH        &kp ASTERISK            &kp LEFT_BRACKET                 &kp RBKT    &kp NUMBER_0              &kp NUMBER_1            &kp NUMBER_2            &kp NUMBER_3        &kp EQUAL
                                           &kp GRAVE     &mt LEFT_GUI UNDERSCORE                   &trans      &kp DELETE                    &trans           &kp SEMICOLON
            >;
        };

        VIM {
            bindings = <
                    &none   &vim_word  &kp LA(RIGHT)   &kp LS(LG(Z))         &none        &kp K_COPY             &kp LG(Z)                   &to 0               &vim_o  &kp K_PASTE
  &hm LEFT_CONTROL ESCAPE    &kp LALT   &kp LEFT_GUI  &kp LEFT_SHIFT         &none          &kp LEFT  &hm RIGHT_SHIFT DOWN  &hm RIGHT_GUI UP_ARROW  &hm RIGHT_ALT RIGHT   &kp ESCAPE
           &kp LEFT_SHIFT  &kp DELETE          &none  &kt LEFT_SHIFT  &kp LA(LEFT)             &none                 &none                   &none          &key_repeat        &none
                                        &kp LG(LEFT)          &trans        &trans    &vim_backspace                &trans                    &end
            >;
        };

        FN_R {
            bindings = <
  &trans  &trans  &trans  &trans  &trans     &sys_reset        &kp F7        &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans  &trans    &bootloader        &kp F4        &kp F5  &kp F6  &kp F11
  &trans  &trans  &trans  &trans  &trans     &kp K_LOCK        &kp F1        &kp F2  &kp F3  &kp F12
                  &trans  &trans  &trans     &bt BT_CLR  &bt BT_SEL 1  &bt BT_SEL 0
            >;
        };

        MEDIA_R {
            bindings = <
  &trans  &trans  &trans  &trans  &trans        &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_AUTO  &kp C_BRIGHTNESS_INC   &none
  &trans  &trans  &trans  &trans  &trans        &trans          &kp C_VOL_DN             &kp C_MUTE          &kp C_VOL_UP  &trans
  &trans  &trans  &trans  &trans  &trans        &trans            &kp C_PREV       &kp C_PLAY_PAUSE            &kp C_NEXT  &trans
                  &trans  &trans  &trans    &bt BT_CLR          &bt BT_SEL 1           &bt BT_SEL 0
            >;
        };

        MEDIA_L {
            bindings = <
  &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_AUTO  &kp C_BRIGHTNESS_INC       &none    &trans  &trans  &trans  &trans  &trans
  &trans          &kp C_VOL_DN             &kp C_MUTE          &kp C_VOL_UP      &trans    &trans  &trans  &trans  &trans  &trans
  &trans            &kp C_PREV       &kp C_PLAY_PAUSE            &kp C_NEXT      &trans    &trans  &trans  &trans  &trans  &trans
                                         &bt BT_SEL 0          &bt BT_SEL 1  &bt BT_CLR    &trans  &trans  &trans
            >;
        };

        FN_L {
            bindings = <
  &bootloader  &kp F7        &kp F8        &kp F9     &kp F10    &trans  &trans  &trans  &trans  &trans
   &sys_reset  &kp F4        &kp F5        &kp F6     &kp F12    &trans  &trans  &trans  &trans  &trans
   &kp K_LOCK  &kp F1        &kp F2        &kp F3     &kp F12    &trans  &trans  &trans  &trans  &trans
                       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR    &trans  &trans  &trans
            >;
        };
    };
};
